{"model_name_or_path": "default__gpt-4o__t-0.00__p-1.00__c-3.00___c0038b", "instance_id": "c0038b", "model_patch": "diff --git a/run_reconstruction.py b/run_reconstruction.py\nnew file mode 100644\nindex 00000000..28de22d9\n--- /dev/null\n+++ b/run_reconstruction.py\n@@ -0,0 +1,43 @@\n+\n+import os\n+import argparse\n+import reconstruct_image_from_representation\n+\n+if __name__ == \"__main__\":\n+    # Define fixed args\n+    input_image_path = '/data/data/agent_test_codebase/GitTaskBench/queries/StyleTransfer_02/input/StyleTransfer_02_input.jpg'\n+    output_dir = '/data/data/agent_test_codebase/GitTaskBench/eval_automation/output/StyleTransfer_02'\n+\n+    # Argument parser setup\n+    parser = argparse.ArgumentParser(description='Run image reconstruction')\n+\n+    parser.add_argument('--should_reconstruct_content', type=bool, default=True,\n+                        help='Reconstruct the content image')\n+    parser.add_argument('--should_visualize_representation', type=bool, default=False,\n+                        help='Visualize representations')\n+    parser.add_argument('--content_img_name', type=str, default=input_image_path,\n+                        help='Path to content image')\n+    parser.add_argument('--style_img_name', type=str, default=input_image_path,\n+                        help='Path to style image') # Style images might not be used here\n+    parser.add_argument('--height', type=int, default=-1,\n+                        help='Height (-1 to keep original)')\n+    parser.add_argument('--saving_freq', type=int, default=1,\n+                        help='Frequency of saving output')\n+    parser.add_argument('--model', type=str, choices=['vgg16', 'vgg19'], default='vgg19',\n+                        help='Model to use')\n+    parser.add_argument('--optimizer', type=str, choices=['lbfgs', 'adam'], default='lbfgs',\n+                        help='Optimizer type')\n+\n+    args = parser.parse_args()\n+\n+    # Wrap settings into a dictionary\n+    config = dict()\n+    for arg in vars(args):\n+        config[arg] = getattr(args, arg)\n+    config['content_images_dir'] = os.path.dirname(input_image_path)\n+    config['style_images_dir'] = os.path.dirname(input_image_path) # Style dir as input dir\n+    config['output_img_dir'] = output_dir\n+    config['img_format'] = (4, '.jpg')\n+\n+    # Run reconstruction\n+    reconstruct_image_from_representation.reconstruct_image_from_representation(config)\n"}