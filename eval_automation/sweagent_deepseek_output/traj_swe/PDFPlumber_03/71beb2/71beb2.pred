{"model_name_or_path": "deepseek-v3__t-0.00__p-1.00__c-0.00___71beb2", "instance_id": "71beb2", "model_patch": "diff --git a/extract_emails.py b/extract_emails.py\nnew file mode 100644\nindex 00000000..b9fcd785\n--- /dev/null\n+++ b/extract_emails.py\n@@ -0,0 +1,27 @@\n+\n+import re\n+import os\n+\n+# Input and output paths\n+input_pdf = \"/data/data/agent_test_codebase/GitTaskBench/queries/PDFPlumber_03/input/PDFPlumber_03_input.pdf\"\n+output_dir = \"/data/data/agent_test_codebase/GitTaskBench/eval_automation/output/PDFPlumber_03\"\n+output_file = os.path.join(output_dir, \"output.txt\")\n+\n+# Regular expression to match email addresses\n+email_regex = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}'\n+\n+# Create output directory if it doesn't exist\n+os.makedirs(output_dir, exist_ok=True)\n+\n+# Read PDF as binary and try to find email patterns\n+email_addresses = []\n+with open(input_pdf, 'rb') as f:\n+    content = f.read().decode('ascii', errors='ignore')\n+    email_addresses = re.findall(email_regex, content)\n+\n+# Save the extracted email addresses to the output file\n+with open(output_file, 'w') as f:\n+    for email in email_addresses:\n+        f.write(email + '\\n')\n+\n+print(f\"Extracted {len(email_addresses)} email addresses to {output_file}\")\n\\ No newline at end of file\n"}