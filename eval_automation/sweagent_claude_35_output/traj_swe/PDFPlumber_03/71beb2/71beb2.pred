{"model_name_or_path": "default__claude-3-5-sonnet-20241022__t-0.00__p-1.00__c-3.00___71beb2", "instance_id": "71beb2", "model_patch": "diff --git a/extract_emails.py b/extract_emails.py\nnew file mode 100644\nindex 00000000..ef8dae2c\n--- /dev/null\n+++ b/extract_emails.py\n@@ -0,0 +1,38 @@\n+\n+import pdfplumber\n+import re\n+import os\n+\n+# Input and output paths\n+input_pdf = \"/data/data/agent_test_codebase/GitTaskBench/queries/PDFPlumber_03/input/PDFPlumber_03_input.pdf\"\n+output_dir = \"/data/data/agent_test_codebase/GitTaskBench/eval_automation/output/PDFPlumber_03\"\n+output_file = os.path.join(output_dir, \"output.txt\")\n+\n+# Create output directory if it doesn't exist\n+os.makedirs(output_dir, exist_ok=True)\n+\n+# Email regex pattern\n+email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}'\n+\n+# Set to store unique email addresses\n+emails = set()\n+\n+# Open the PDF\n+with pdfplumber.open(input_pdf) as pdf:\n+    # Iterate through all pages\n+    for page in pdf.pages:\n+        # Extract text from the page\n+        text = page.extract_text()\n+        \n+        # Find all email addresses in the text\n+        found_emails = re.findall(email_pattern, text)\n+        \n+        # Add found emails to the set\n+        emails.update(found_emails)\n+\n+# Write emails to output file\n+with open(output_file, 'w') as f:\n+    for email in sorted(emails):  # Sort emails for consistent output\n+        f.write(email + '\\n')\n+\n+print(f\"Found {len(emails)} unique email addresses. Results saved to {output_file}\")\n\\ No newline at end of file\n"}