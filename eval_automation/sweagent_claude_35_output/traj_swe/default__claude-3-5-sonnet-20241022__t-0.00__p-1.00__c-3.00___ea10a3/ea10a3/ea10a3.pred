{"model_name_or_path": "default__claude-3-5-sonnet-20241022__t-0.00__p-1.00__c-3.00___ea10a3", "instance_id": "ea10a3", "model_patch": "diff --git a/hide_text.py b/hide_text.py\nnew file mode 100644\nindex 00000000..95f24682\n--- /dev/null\n+++ b/hide_text.py\n@@ -0,0 +1,51 @@\n+\n+import os\n+import binascii\n+from typing import Union\n+\n+def str_to_bytes(text: str) -> bytes:\n+    \"\"\"Convert a string to bytes.\"\"\"\n+    return text.encode('utf-8')\n+\n+def hide_message(input_path: str, message: str, output_path: str) -> bool:\n+    \"\"\"Hide a message (string) in an image with the LSB (Least Significant Bit) technique.\"\"\"\n+    try:\n+        with open(input_path, 'rb') as f:\n+            content = bytearray(f.read())\n+            \n+        # Convert message to binary\n+        message_bytes = str_to_bytes(message)\n+        binary = bin(int(binascii.hexlify(message_bytes), 16))[2:]\n+        \n+        # Add padding to make sure binary string length is a multiple of 8\n+        binary = binary.zfill(8 * ((len(binary) + 7) // 8))\n+        \n+        # Add terminator\n+        binary += '0' * 8\n+        \n+        if len(binary) > len(content[54:]):  # Skip header (54 bytes for BMP)\n+            raise ValueError(\"Message too large for image\")\n+            \n+        # Modify LSB of each byte\n+        for i, bit in enumerate(binary):\n+            content[54 + i] = (content[54 + i] & ~1) | int(bit)\n+            \n+        # Write modified image\n+        with open(output_path, 'wb') as f:\n+            f.write(content)\n+            \n+        return True\n+    except Exception as e:\n+        print(f\"Error: {str(e)}\")\n+        return False\n+\n+# Input and output paths\n+input_path = \"/data/data/agent_test_codebase/GitTaskBench/queries/Stegano_03/input/Stegano_03_input.png\"\n+output_path = \"/data/data/agent_test_codebase/GitTaskBench/eval_automation/output/Stegano_03/output.png\"\n+\n+# Ensure output directory exists\n+os.makedirs(os.path.dirname(output_path), exist_ok=True)\n+\n+# Hide the message\n+if hide_message(input_path, \"hidden_text\", output_path):\n+    print(\"Message has been hidden successfully in the output image.\")\n\\ No newline at end of file\n"}