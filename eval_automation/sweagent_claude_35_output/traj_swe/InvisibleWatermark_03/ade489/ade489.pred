{"model_name_or_path": "default__claude-3-5-sonnet-20241022__t-0.00__p-1.00__c-3.00___ade489", "instance_id": "ade489", "model_patch": "diff --git a/embed_watermark.py b/embed_watermark.py\nnew file mode 100644\nindex 00000000..713c6a76\n--- /dev/null\n+++ b/embed_watermark.py\n@@ -0,0 +1,37 @@\n+\n+import cv2\n+from imwatermark import WatermarkEncoder\n+import os\n+\n+# Input and output paths\n+input_path = '/data/data/agent_test_codebase/GitTaskBench/queries/InvisibleWatermark_03/input/LeInvisibleWatermark_03_input.png'\n+output_dir = '/data/data/agent_test_codebase/GitTaskBench/eval_automation/output/InvisibleWatermark_03'\n+output_path = os.path.join(output_dir, 'output.png')\n+\n+# Create output directory if it doesn't exist\n+os.makedirs(output_dir, exist_ok=True)\n+\n+# Read the input image\n+bgr = cv2.imread(input_path)\n+\n+# Set the watermark text\n+wm = 'watermark'\n+\n+# Create and configure the encoder\n+encoder = WatermarkEncoder()\n+encoder.set_watermark('bytes', wm.encode('utf-8'))\n+\n+# Encode the watermark into the image\n+bgr_encoded = encoder.encode(bgr, 'dwtDct')\n+\n+# Save the watermarked image\n+cv2.imwrite(output_path, bgr_encoded)\n+\n+print(f\"Watermark embedded successfully. Output saved to: {output_path}\")\n+\n+# Verify the watermark by decoding\n+from imwatermark import WatermarkDecoder\n+decoder = WatermarkDecoder('bytes', len(wm.encode('utf-8')))\n+watermark = decoder.decode(bgr_encoded, 'dwtDct')\n+decoded_text = watermark.decode('utf-8')\n+print(f\"Verification - Decoded watermark: {decoded_text}\")\n\\ No newline at end of file\n"}